#include <ctime>
#include <iostream>
#include <string>
#include <vector>
#include "1.7.h"
using namespace std;

#define CHECK(x) do {\
  if (!(x)) {\
    cerr << "ERROR in " __FILE__ ":" << __LINE__\
         << ": CHECK condition violated: " #x << std::endl;\
    exit (1);\
  }\
} while(0)

// Crashes if the string isn't valid.
Uint2048 FromString(const string& digits) {
  Uint2048 result(0);
  for (int i = 0; i < digits.size(); ++i) {
    Uint2048 result2 = result + result;
    Uint2048 result4 = result2 + result2;
    result = result4 + result4 + result2 + Uint2048(int(digits[i] - '0'));
  }
  return result;
}

int main() {
  struct ExpectedMult {
    string a;
    string b;
    string a_times_b;
  };
  // A few tests. Reference obtained easily with python :-)
  const vector<ExpectedMult> tests = {
    {"1234", "5678", "7006652"},
    {"5678", "1234", "7006652"},
    {"123", "456780", "56183940"},
    {"567", "8901234", "5046999678"},  // Result doesn't fit in uint32
    {"123456789", "987654321", "121932631112635269"},
    // Inputs barely fit in uint64
    {"18446744073709551615", "18446744073709551613",
     "340282366920938463389587631136930004995"},
    {"1234",
     "75819205816875673215016325081237956321987659832168756932157321090098887315471129874091284",
     "93560899978024580747330145150247638101332772232896246054282134225182026947291374264628644456"},
    // Result still fits easily in 2048 bits.
    {"43986983610975893852739526056027601876875369832759032965861201756218705120653208563274987234996801872356187326510238765643654516432510387235061263265062932892983759873287682953280571278053275921658742156213580732198750732195683205",
      "325809328579832750932175732975873210970063217658732658327653248763265071832632897508321750217384659329860875018743295032876532859103257203650873265982143057109265687621938759083275932187593216056219856123583279577219835097214853210",
      "14331369596544163112721077348654073767581800987204506138000058220152428506308798910432121391339803529968295311306854027306689608020469394336041811091356017278244267103602914248817896780902563014611017822483621911737154334171518592982853325412396356820163617102279064174324830526488029209382747383882613430866391275910523644561738053298879729017396693452303149862482071081345686344019477690225462044551483447281261504245022223596105252436515278154538769737338050"},
    // Result barely fits in 2048 bits: 2^2048-1 = (2^1024+1) * (2^1024-1).
    // Then we decompose 2^1024-1 similarly, and we iterate, and we get:
    // 2^2048-1 = (2^1024+1) * (2^512+1) * ... * (2^1+1) * 1
    {"4469269309980865699858008332735282042493121940197464459241187147907254676691182325600624766055634475896677286062162016951251294270648856648811216335361365",
     "7230937280763097765740349818084942338736279743837066854079025117195772174775409602007255072322038148990346298842664014363587250936384874974908838963672324493673580476839647993103903470460464584423630312104135280463035510771741213831273559491730491117601510284368541647068493042214158728485249970445649529533520264055134878216917247016341696626906535220263336416295154049213152213023410254084357370922993719075580663029572091031876607060788453176479304100708614147",
     "32317006071311007300714876688669951960444102669715484032130345427524655138867890893197201411522913463688717960921898019494119559150490921095088152386448283120630877367300996091750197750389652106796057638384067568276792218642619756161838094338476170470581645852036305042887575891541065808607552399123930385521914333389668342420684974786564569494856176035326322058077805659331026192708460314150258592864177116725943603718461857357598351152301645904403697613233287231227125684710820209725157101726931323469678542580656697935045997268352998638215525166389437335543602135433229604645318478604952148193555853611059596230655"},
  };
  srandom(0);
  const Uint2048 zero(0);
  const Uint2048 one(1);
  Uint2048 minus_one(1);
  for (int i = 0; i < 2048; ++i) {
    minus_one = minus_one + minus_one + one;
  }
  for (int i = 0; i < tests.size(); ++i) {
    const ExpectedMult& test = tests[i];
    const Uint2048 a = FromString(test.a);
    const Uint2048 b = FromString(test.b);
    const Uint2048 a_times_b = FromString(test.a_times_b);
    for (int ab : {0, 1}) {
      for (int delta : {0, 1, -1}) {
        const Uint2048 big = a_times_b + (delta == 0 ? zero : delta == 1 ? one : minus_one);
        const Uint2048 divider = ab == 0 ? a : b;
        Uint2048 expected = (ab == 0 ? b : a) + (delta == -1 ? minus_one : zero);
        if (!(zero < big)) expected = zero;
        const Uint2048 result = big / divider;
        if (result < expected || expected < result) {
          cout << "FAILED! When computing the following division:\n";
          big.Print();
          cout << " /\n";
          divider.Print();
          cout << "\nGot this: ";
          result.Print();
          cout << "\nExpected: ";
          expected.Print();
          cout << "\n";
          return 1;
        }
      }
    }
    cout << "PASSED test #" << i << "\n";
  }
  cout << "Note: the performance tests weren't ran. If your code is slow, this test won't detect it.\n";
}
